name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  # BUILD_TYPE: Release, Debug

jobs:
  MSVC:
    runs-on: windows-latest
    strategy:
      fail-fast: true
      matrix:
        # os: [windows-latest] # [ubuntu-20.04, ubuntu-18.04, windows-2019, windows-2016, macos-11, macos-10.15]
        build_type: [Release, Debug]
        build_arch: [x64, Win32]
        config:
          - { toolset_ver: "v142", }
          - { toolset_ver: "v141", }
          # v140 isn't supported (c++11 only)

    steps:
    - name: Git Line Endings
      run: |
        git config --global core.autocrlf false

    - uses: actions/checkout@v2

    - name: Install Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.7'
        architecture: 'x64' # optional, x86

    - name: Install Conan
      run: |
        python --version
        pip install conan
        conan user
        conan --version
        conan profile new default --detect

    - name: Download swiftShader
      run: |
        cd ${{github.workspace}}
        mkdir build
        cd build
        git clone https://github.com/p-groarke/swiftshader.git
      # cd swiftshader
      # git reset --hard 4db20a80409b207b3e134c93968468b7c3783eb6
      # cd build
      # cmake .. -DCMAKE_BUILD_TYPE=Release -Thost=x64
      # cmake --build . --parallel --config Release

    - name: Configure
      run: |
        cd ${{github.workspace}}/build
        cmake .. -T ${{ matrix.config.toolset_ver }} -A ${{ matrix.build_arch }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      run: |
        cd ${{github.workspace}}/build
        cmake --build . --parallel --config ${{ matrix.build_type }}

    - name: Punch-in swiftshader
      run: |
        cd ${{github.workspace}}/build
        xcopy /y swiftshader\bin\Windows\vulkan-1.dll bin\vulkan-1.dll

    - name: Test
      # working-directory: ${{github.workspace}}/build
      run: |
        cd ${{github.workspace}}/build
        ./bin/fea_vkc_tests


  # Clang:
  #   runs-on: macos-latest
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       build_type: [Release, Debug]
  #       config:
  #         - { xcode_ver: "13.2.1" }
  #         - { xcode_ver: "12.4" }
  #         - { xcode_ver: "11.7" }

  #   steps:
  #   - name: Git Line Endings
  #     run: |
  #       git config --global core.autocrlf false

  #   - uses: actions/checkout@v2

  #   - name: Install XCode ${{ matrix.config.xcode_ver }}
  #     uses: maxim-lobanov/setup-xcode@v1.3.0
  #     with:
  #       xcode-version: "${{ matrix.config.xcode_ver }}"

  #   - name: Install Python
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: '3.7'
  #       architecture: 'x64' # optional, x86

  #   - name: Install Conan
  #     run: |
  #       python --version
  #       pip install conan
  #       conan user
  #       conan --version
  #       conan profile new default --detect

  #   - name: Configure
  #     run: |
  #       cd ${{github.workspace}}
  #       mkdir build
  #       cd build
  #       cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

  #   - name: Build
  #     run: |
  #       cd ${{github.workspace}}/build
  #       cmake --build . --parallel --config ${{ matrix.build_type }}

  #   - name: Test
  #     run: |
  #       cd ${{github.workspace}}/build
  #       ./bin/fea_vkc_tests


  # Gcc:
  #   runs-on: ${{ matrix.config.os }}
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       build_type: [Release, Debug]
  #       # build_arch: [x64, x86]
  #       config:
  #         - { os: ubuntu-20.04, gcc_ver: "10" }
  #         - { os: ubuntu-20.04, gcc_ver: "9" }
  #         - { os: ubuntu-18.04, gcc_ver: "7" }

  #   steps:
  #   - name: Git Line Endings
  #     run: |
  #       git config --global core.autocrlf false

  #   - uses: actions/checkout@v2

  #   # - name: Install Gcc
  #   #   uses: egor-tensin/setup-gcc@v1
  #   #   with:
  #   #     version: ${{ matrix.config.gcc_ver }}
  #   #     platform: ${{ matrix.build_arch }}

  #   - name: Install Python
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: '3.7'
  #       architecture: 'x64' # optional, x86

  #   - name: Install Conan
  #     env:
  #       CC: gcc-${{ matrix.config.gcc_ver }}
  #       CXX: g++-${{ matrix.config.gcc_ver }}
  #     run: |
  #       python --version
  #       pip install conan
  #       conan user
  #       conan --version
  #       conan profile new default --detect
  #       conan profile update settings.compiler.libcxx=libstdc++11 default

  #   - name: Configure
  #     env:
  #       CC: gcc-${{ matrix.config.gcc_ver }}
  #       CXX: g++-${{ matrix.config.gcc_ver }}
  #     run: |
  #       cd ${{github.workspace}}
  #       mkdir build
  #       cd build
  #       cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

  #   - name: Build
  #     run: |
  #       cd ${{github.workspace}}/build
  #       cmake --build . --parallel --config ${{ matrix.build_type }}

  #   - name: Test
  #     run: |
  #       cd ${{github.workspace}}/build
  #       ./bin/fea_vkc_tests